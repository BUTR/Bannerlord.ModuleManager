// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.ModuleManager.Source" NuGet package (https://www.nuget.org/packages/Bannerlord.ModuleManager.Source).
//   Please see https://github.com/BUTR/Bannerlord.ModuleManager for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.ModuleManager.Source" folder and the "ModuleUtilities.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

namespace Bannerlord.ModuleManager
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;

#nullable enable
#pragma warning disable
#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        sealed record ModuleIssue(ModuleInfoExtended Target, string SourceId, ModuleIssueType Type)
    {
        public string Reason { get; init; }
        public ApplicationVersionRange SourceVersion { get; init; }
    }
    
#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        enum ModuleIssueType
    {
        MissingDependencies,
        DependencyMissingDependencies,
        DependencyValidationError,
        VersionMismatch,
        Incompatible,
    }

#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        static class ModuleUtilities
    {
        /*
        private static bool CheckModuleCompatibility(ModuleInfoExtended moduleInfoExtended)
        {
            static bool CheckIfSubModuleCanBeLoaded(SubModuleInfoExtended subModuleInfo)
            {
                if (subModuleInfo.Tags.Count > 0)
                {
                    foreach (var kv in subModuleInfo.Tags)
                    {
                        if (!Enum.TryParse<SubModuleTags>(kv.Key, out var tag))
                            continue;

                        foreach (var value in kv.Value)
                        {
                            if (!GetSubModuleTagValiditiy(tag, value))
                            {
                                return false;
                            }
                        }
                    }
                    return true;
                }
                return true;
            }
            static bool GetSubModuleTagValiditiy(SubModuleTags tag, string value) => tag switch
            {
                SubModuleTags.RejectedPlatform => !Enum.TryParse<Platform>(value, out var platform) || ApplicationPlatform.CurrentPlatform != platform,
                SubModuleTags.ExclusivePlatform => !Enum.TryParse<Platform>(value, out var platform) || ApplicationPlatform.CurrentPlatform == platform,
                SubModuleTags.DependantRuntimeLibrary => !Enum.TryParse<Runtime>(value, out var runtime) || ApplicationPlatform.CurrentRuntimeLibrary == runtime,
                SubModuleTags.IsNoRenderModeElement => value.Equals("false"),
                SubModuleTags.DedicatedServerType => value.ToLower() switch
                {
                    "none" => true,
                    _ => false
                },
                _ => true
            };

            foreach (var subModule in moduleInfoExtended.SubModules.Where(CheckIfSubModuleCanBeLoaded))
            {
                var asm = Path.GetFullPath(Path.Combine(BasePath.Name, "Modules", moduleInfoExtended.Id, "bin", "Win64_Shipping_Client", subModule.DLLName));
                switch (Manager._compatibilityChecker.CheckAssembly(asm))
                {
                    case CheckResult.TypeLoadException:
                        AppendIssue(instance, moduleInfoExtended, "Not binary compatible with the current game version!");
                        return false;
                    case CheckResult.ReflectionTypeLoadException:
                        AppendIssue(instance, moduleInfoExtended, "Not binary compatible with the current game version!");
                        return false;
                    case CheckResult.GenericException:
                        AppendIssue(instance, moduleInfoExtended, "There was an error checking for binary compatibility with the current game version");
                        return false;
                }
            }

            return true;
        }
        */
        
        public static IEnumerable<ModuleIssue> ValidateModule(Dictionary<string, ModuleInfoExtended> modules, ModuleInfoExtended module, Func<ModuleInfoExtended, bool> isSelected, HashSet<ModuleInfoExtended> visitedModules)
        {
            /*
            if (!CheckModuleCompatibility(moduleInfoExtended))
            {
                yield return new ModuleIssue(moduleInfoExtended, moduleInfoExtended.Id, "Not compatible!");
                yield break;
            }
            */

            // Check that all dependencies are present
            foreach (var dependency in module.DependentModules)
            {
                // Ignore the check for Optional
                if (dependency.IsOptional) continue;

                if (!modules.ContainsKey(dependency.Id))
                {
                    yield return new ModuleIssue(module, dependency.Id, ModuleIssueType.MissingDependencies)
                    {
                        Reason = $"Missing {dependency.Id} {dependency.Version}",
                        SourceVersion = new(dependency.Version, dependency.Version)
                    };
                    yield break;
                }
            }
            foreach (var metadata in module.DependentModuleMetadatas)
            {
                // Ignore the check for Optional
                if (metadata.IsOptional) continue;

                // Ignore the check for Incompatible
                if (metadata.IsIncompatible) continue;

                if (!modules.ContainsKey(metadata.Id))
                {
                    if (metadata.Version != ApplicationVersion.Empty)
                    {
                        yield return new ModuleIssue(module, metadata.Id, ModuleIssueType.MissingDependencies)
                        {
                            Reason = $"Missing {metadata.Id} {metadata.Version}",
                            SourceVersion = new(metadata.Version, metadata.Version)
                        };
                    }
                    if (metadata.VersionRange != ApplicationVersionRange.Empty)
                    {
                        yield return new ModuleIssue(module, metadata.Id, ModuleIssueType.MissingDependencies)
                        {
                            Reason = $"Missing {metadata.Id} {metadata.VersionRange}",
                            SourceVersion = metadata.VersionRange
                        };
                    }
                    yield break;
                }
            }

            // Check that the dependencies themselves have all dependencies present
            foreach (var dependency in ModuleSorter.GetDependentModulesOf(modules.Values, module, visitedModules, new ModuleSorterOptions { SkipOptionals = true, SkipExternalDependencies = true }).ToArray())
            {
                if (module.DependentModules.FirstOrDefault(dmm => dmm.Id == dependency.Id) is { } dependencyData)
                {
                    // Not found, might be from DependentModuleMetadatas
                    if (dependencyData is null) continue;

                    // Ignore the check for Optional
                    if (dependencyData.IsOptional) continue;

                    // Check missing dependency dependencies
                    if (!modules.TryGetValue(dependency.Id, out var depencencyModuleInfo))
                    {
                        yield return new ModuleIssue(module, dependency.Id, ModuleIssueType.DependencyMissingDependencies)
                        {
                            Reason = $"'{dependency.Id}' is missing it's dependencies!"
                        };
                        yield break;
                    }
                
                    // Check depencency correctness
                    if (ValidateModule(modules, depencencyModuleInfo, isSelected, visitedModules).Any())
                    {
                        yield return new ModuleIssue(module, dependency.Id, ModuleIssueType.DependencyValidationError)
                        {
                            Reason = $"'{dependency.Id}' has unresolved issues!"
                        };
                        yield break;
                    }
                }
                if (module.DependentModuleMetadatas.FirstOrDefault(dmm => dmm.Id == dependency.Id) is { } dependencyMetadata)
                {
                    // Not found, might be from DependentModules
                    if (dependencyMetadata is null) continue;

                    // Handle onlyirect dependencies
                    if (dependencyMetadata.LoadType != LoadType.LoadBeforeThis) continue;
                    
                    // Ignore the check for Optional
                    if (dependencyMetadata.IsOptional) continue;

                    // Ignore the check for Incompatible
                    if (dependencyMetadata.IsIncompatible) continue;

                    // Check missing dependency dependencies
                    if (!modules.TryGetValue(dependency.Id, out var depencencyModuleInfo))
                    {
                        yield return new ModuleIssue(module, dependency.Id, ModuleIssueType.DependencyMissingDependencies)
                        {
                            Reason = $"'{dependency.Id}' is missing it's dependencies!"
                        };
                        yield break;
                    }

                    // Check depencency correctness
                    if (ValidateModule(modules, depencencyModuleInfo, isSelected, visitedModules).Any())
                    {
                        yield return new ModuleIssue(module, dependency.Id, ModuleIssueType.DependencyValidationError)
                        {
                            Reason = $"'{dependency.Id}' has unresolved issues!"
                        };
                        yield break;
                    }
                }
            }

            // Check that the dependencies have the minimum required version set by DependedModuleMetadatas
            var comparer = new ApplicationVersionComparer();
            foreach (var metadata in module.DependentModuleMetadatas.Where(m => /*!m.IsOptional &&*/ !m.IsIncompatible))
            {
                // Handle only direct dependencies
                if (metadata.LoadType != LoadType.LoadBeforeThis) continue;

                // Ignore the check for empty versions
                if (metadata.Version == ApplicationVersion.Empty && metadata.VersionRange == ApplicationVersionRange.Empty) continue;

                // Dependency is loaded
                if (!modules.TryGetValue(metadata.Id, out var dependedModule)) continue;

                if (metadata.Version != ApplicationVersion.Empty)
                {
                    // dependedModuleMetadata.Version > dependedModule.Version
                    if (!metadata.IsOptional && (comparer.Compare(metadata.Version, dependedModule?.Version) > 0))
                    {
                        yield return new ModuleIssue(module, dependedModule?.Id, ModuleIssueType.VersionMismatch)
                        {
                            Reason = $"'{dependedModule?.Id}' wrong version <= {metadata.Version}",
                            SourceVersion = new(metadata.Version, metadata.Version)
                        };
                        yield break;
                    }
                }

                if (metadata.VersionRange != ApplicationVersionRange.Empty)
                {
                    // dependedModuleMetadata.Version > dependedModule.VersionRange.Min
                    // dependedModuleMetadata.Version < dependedModule.VersionRange.Max
                    if (!metadata.IsOptional)
                    {
                        if (comparer.Compare(metadata.VersionRange.Min, dependedModule?.Version) > 0)
                        {
                            yield return new ModuleIssue(module, dependedModule?.Id, ModuleIssueType.VersionMismatch)
                            {
                                Reason = $"'{dependedModule?.Id}' wrong version < [{metadata.VersionRange}]",
                                SourceVersion = metadata.VersionRange
                            };
                            yield break;
                        }
                        if (comparer.Compare(metadata.VersionRange.Max, dependedModule?.Version) < 0)
                        {
                            yield return new ModuleIssue(module, dependedModule?.Id, ModuleIssueType.VersionMismatch)
                            {
                                Reason = $"'{dependedModule?.Id}' wrong version > [{metadata.VersionRange}]",
                                SourceVersion = metadata.VersionRange
                            };
                            yield break;
                        }
                    }
                }
            }

            // Do not load this mod if an incompatible mod is selected
            foreach (var dependency in module.IncompatibleModules)
            {
                // Dependency is loaded
                if (!modules.TryGetValue(dependency.Id, out var depencencyModule) && !isSelected(depencencyModule)) continue;

                // If the incompatible mod is selected, this mod should be disabled
                if (isSelected(depencencyModule))
                {
                    yield return new ModuleIssue(module, depencencyModule.Id, ModuleIssueType.Incompatible)
                    {
                        Reason = $"'{depencencyModule.Id}' is incompatible with this module"
                    };
                    yield break;
                }
            }
            foreach (var metadata in module.DependentModuleMetadatas.Where(m => m.IsIncompatible))
            {
                // Dependency is loaded
                if (!modules.TryGetValue(metadata.Id, out var metadataModule) && !isSelected(metadataModule)) continue;

                // If the incompatible mod is selected, this mod should be disabled
                if (isSelected(metadataModule))
                {
                    yield return new ModuleIssue(module, metadataModule.Id, ModuleIssueType.Incompatible)
                    {
                        Reason = $"'{metadataModule.Id}' is incompatible with this module"
                    };
                    yield break;
                }
            }

            // If another mod declared incompatibility and is selected, disable this
            foreach (var kv in modules)
            {
                // Ignore self
                if (kv.Key == module.Id) continue;

                if (!isSelected(kv.Value)) continue;
                
                foreach (var metadata in kv.Value.DependentModuleMetadatas.Where(m => m.IsIncompatible && m.Id == module.Id))
                {
                    if (!modules.TryGetValue(kv.Key, out var metadataModule)) continue;

                    // If the incompatible mod is selected, this mod is disabled
                    if (isSelected(metadataModule))
                    {
                        yield return new ModuleIssue(module, metadataModule.Id, ModuleIssueType.Incompatible)
                        {
                            Reason = $"'{metadataModule.Id}' is incompatible with this module"
                        };
                        yield break;
                    }
                }
            }
        }
        
        public static IEnumerable<ModuleIssue> ToggleModuleSelection(
            Dictionary<string, ModuleInfoExtended> loadedModules,
            ModuleInfoExtended targetModuleInfo,
            List<ModuleInfoExtended> modules,
            HashSet<ModuleInfoExtended> visited,
            Func<ModuleInfoExtended, bool> getSelected,
            Action<ModuleInfoExtended, bool> setSelected,
            Func<ModuleInfoExtended, bool> getDisabled,
            Action<ModuleInfoExtended, bool> setDisabled)
        {
            var opt = new ModuleSorterOptions { SkipOptionals = true, SkipExternalDependencies = true };

            var dependencies = ModuleSorter.GetDependentModulesOf(loadedModules.Values, targetModuleInfo, visited, opt).ToArray();

            setSelected(targetModuleInfo, !getSelected(targetModuleInfo));

            if (getSelected(targetModuleInfo))
            {
                // Vanilla check
                // Select all dependencies if they are not selected
                foreach (var moduleInfo in loadedModules.Values)
                {
                    if (!getSelected(moduleInfo) && dependencies.Any(d => d.Id == moduleInfo.Id))
                        ToggleModuleSelection(loadedModules, moduleInfo, modules, visited, getSelected, setSelected, getDisabled, setDisabled);
                    //module.IsSelected |= allDependencies.Any(id => id == module.Info.Id);
                }

                // Deselect and disable any mod that is incompatible with this one
                foreach (var dmm in targetModuleInfo.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible))
                {
                    if (!loadedModules.TryGetValue(dmm.Id, out var incompatibleModuleInfo)) continue;
                    if (getSelected(incompatibleModuleInfo))
                        ToggleModuleSelection(loadedModules, incompatibleModuleInfo, modules, visited, getSelected, setSelected, getDisabled, setDisabled);

                    setDisabled(incompatibleModuleInfo, true);
                    yield return new ModuleIssue(incompatibleModuleInfo, incompatibleModuleInfo.Id, ModuleIssueType.Incompatible)
                    {
                        Reason = $"'{targetModuleInfo.Id}' is incompatible with this"
                    };
                }

                // Disable any mod that declares this mod as incompatible
                foreach (var kv in loadedModules)
                {
                    foreach (var dmm in kv.Value.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible && dmm.Id == targetModuleInfo.Id))
                    {
                        if (!loadedModules.TryGetValue(kv.Key, out var incompatibleModuleInfo)) continue;
                        if (getSelected(incompatibleModuleInfo))
                            ToggleModuleSelection(loadedModules, incompatibleModuleInfo, modules, visited, getSelected, setSelected, getDisabled, setDisabled);

                        // We need to re-check that everything is alright with the external dependency
                        setDisabled(incompatibleModuleInfo, getDisabled(incompatibleModuleInfo) | !ModuleSorter.AreAllDependenciesOfModulePresent(loadedModules.Values, incompatibleModuleInfo));
                    }
                }
            }
            else
            {
                // Vanilla check
                // Deselect all modules that depend on this module if they are selected
                foreach (var moduleInfo in loadedModules.Values/*.Where(m => !m.IsOfficial)*/)
                {
                    var dependencies2 = ModuleSorter.GetDependentModulesOf(loadedModules.Values, moduleInfo, opt);
                    if (getSelected(moduleInfo) && dependencies2.Any(d => d.Id == targetModuleInfo.Id))
                        ToggleModuleSelection(loadedModules, moduleInfo, modules, visited, getSelected, setSelected, getDisabled, setDisabled);
                }

                // Enable for selection any mod that is incompatible with this one
                foreach (var dmm in targetModuleInfo.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible))
                {
                    if (!loadedModules.TryGetValue(dmm.Id, out var incompatibleModuleInfo)) continue;
                    setDisabled(incompatibleModuleInfo, false);
                }

                // Check if any mod that declares this mod as incompatible can be Enabled
                foreach (var kv in loadedModules)
                {
                    foreach (var dmm in kv.Value.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible && dmm.Id == targetModuleInfo.Id))
                    {
                        if (!loadedModules.TryGetValue(kv.Key, out var incompatibleModuleInfo)) continue;
                        // We need to re-check that everything is alright with the external dependency
                        setDisabled(incompatibleModuleInfo, getDisabled(incompatibleModuleInfo) & !ModuleSorter.AreAllDependenciesOfModulePresent(loadedModules.Values, incompatibleModuleInfo));
                    }
                }
            }

            //targetModule.IsDisabled = !AreAllDependenciesOfModulePresent(instance, targetModule.Info, modules);
        }
    }
#pragma warning restore
#nullable restore
}
