// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.ModuleManager.Source" NuGet package (https://www.nuget.org/packages/Bannerlord.ModuleManager.Source).
//   Please see https://github.com/BUTR/Bannerlord.ModuleManager for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.ModuleManager.Source" folder and the "ModuleUtilities.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

namespace Bannerlord.ModuleManager
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;

#nullable enable
#pragma warning disable
#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        sealed record ModuleIssue(ModuleInfoExtended Target, string SourceId, ModuleIssueType Type)
    {
        public string Reason { get; init; }
        public ApplicationVersionRange SourceVersion { get; init; }
    }
    
#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        enum ModuleIssueType
    {
        MissingDependencies,
        DependencyMissingDependencies,
        DependencyValidationError,
        VersionMismatch,
        Incompatible,
    }

#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        static class ModuleUtilities
    {
        public static bool AreDependenciesPresent(IReadOnlyCollection<ModuleInfoExtended> source, ModuleInfoExtended info)
        {
            foreach (var dependentModule in info.DependentModules)
            {
                if (dependentModule.IsOptional)
                {
                    continue;
                }

                if (source.All(m => m.Id != dependentModule.Id))
                {
                    return false;
                }
            }
            foreach (var dependentModule in info.IncompatibleModules)
            {
                if (source.Any(m => m.Id == dependentModule.Id))
                {
                    return false;
                }
            }
            foreach (var dependentModuleMetadata in info.DependentModuleMetadatas)
            {
                if (dependentModuleMetadata.IsIncompatible)
                {
                    if (source.Any(m => m.Id == dependentModuleMetadata.Id))
                    {
                        return false;
                    }
                }
                if (dependentModuleMetadata.IsOptional)
                {
                    continue;
                }
                if (dependentModuleMetadata.LoadType != LoadType.LoadBeforeThis)
                {
                    continue;
                }

                if (source.All(m => m.Id != dependentModuleMetadata.Id))
                {
                    return false;
                }
            }
            return true;
        }

        public static IEnumerable<ModuleInfoExtended> GetDependencies(IReadOnlyCollection<ModuleInfoExtended> source, ModuleInfoExtended module)
        {
            var visited = new HashSet<ModuleInfoExtended>();
            return GetDependencies(source, module, visited, new ModuleSorterOptions() { SkipOptionals = false, SkipExternalDependencies = false });
        }
        public static IEnumerable<ModuleInfoExtended> GetDependencies(IReadOnlyCollection<ModuleInfoExtended> source, ModuleInfoExtended module, ModuleSorterOptions options)
        {
            var visited = new HashSet<ModuleInfoExtended>();
            return GetDependencies(source, module, visited, options);
        }
        public static IEnumerable<ModuleInfoExtended> GetDependencies(IReadOnlyCollection<ModuleInfoExtended> source, ModuleInfoExtended module, HashSet<ModuleInfoExtended> visited, ModuleSorterOptions options)
        {
            var dependencies = new List<ModuleInfoExtended>();
            ModuleSorter.Visit(module, x => GetDependenciesInternal(source, x, options), dependencies, visited);
            return dependencies;
        }
        private static IEnumerable<ModuleInfoExtended> GetDependenciesInternal(IReadOnlyCollection<ModuleInfoExtended> source, ModuleInfoExtended module, ModuleSorterOptions options)
        {
            foreach (var dependentModule in module.DependentModules)
            {
                if (dependentModule.IsOptional && options.SkipOptionals)
                {
                    continue;
                }

                if (source.FirstOrDefault(i => i.Id == dependentModule.Id) is { } moduleInfo)
                {
                    yield return moduleInfo;
                }
            }

            foreach (var dependentModuleMetadata in module.DependentModuleMetadatas)
            {
                if (dependentModuleMetadata.IsOptional && options.SkipOptionals)
                {
                    continue;
                }

                if (dependentModuleMetadata.LoadType != LoadType.LoadBeforeThis)
                {
                    continue;
                }

                var moduleInfo = source.FirstOrDefault(i => i.Id == dependentModuleMetadata.Id);
                if (!dependentModuleMetadata.IsOptional && moduleInfo is null)
                {
                    // We should not hit this place. If we do, the module list is invalid
                }
                else if (moduleInfo is not null)
                {
                    yield return moduleInfo;
                }
            }

            if (!options.SkipExternalDependencies)
            {
                foreach (var moduleInfo in source)
                {
                    foreach (var dependentModule in moduleInfo.ModulesToLoadAfterThis)
                    {
                        if (dependentModule.IsOptional && options.SkipOptionals)
                        {
                            continue;
                        }

                        if (dependentModule.Id != module.Id)
                        {
                            continue;
                        }

                        yield return moduleInfo;
                    }

                    foreach (var dependentModuleMetadata in moduleInfo.DependentModuleMetadatas)
                    {
                        if (dependentModuleMetadata.IsOptional && options.SkipOptionals)
                        {
                            continue;
                        }

                        if (dependentModuleMetadata.LoadType != LoadType.LoadAfterThis)
                        {
                            continue;
                        }

                        if (dependentModuleMetadata.Id != module.Id)
                        {
                            continue;
                        }

                        yield return moduleInfo;
                    }
                }
            }
        }
        
        public static IEnumerable<ModuleIssue> ValidateModule(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, Func<ModuleInfoExtended, bool> isSelected)
        {
            var visited = new HashSet<ModuleInfoExtended>();
            foreach (var issue in ValidateModule(modules, targetModule, visited, isSelected))
                yield return issue;
        }
        public static IEnumerable<ModuleIssue> ValidateModule(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, HashSet<ModuleInfoExtended> visitedModules, Func<ModuleInfoExtended, bool> isSelected)
        {
            // Check that all dependencies are present
            foreach (var dependency in targetModule.DependentModules)
            {
                // Ignore the check for Optional
                if (dependency.IsOptional) continue;

                if (!modules.Any(x => string.Equals(x.Id, dependency.Id, StringComparison.Ordinal)))
                {
                    yield return new ModuleIssue(targetModule, dependency.Id, ModuleIssueType.MissingDependencies)
                    {
                        Reason = $"Missing {dependency.Id} {dependency.Version}",
                        SourceVersion = new(dependency.Version, dependency.Version)
                    };
                    yield break;
                }
            }
            foreach (var metadata in targetModule.DependentModuleMetadatas)
            {
                // Ignore the check for Optional
                if (metadata.IsOptional) continue;

                // Ignore the check for Incompatible
                if (metadata.IsIncompatible) continue;

                if (!modules.Any(x => string.Equals(x.Id, metadata.Id, StringComparison.Ordinal)))
                {
                    if (metadata.Version != ApplicationVersion.Empty)
                    {
                        yield return new ModuleIssue(targetModule, metadata.Id, ModuleIssueType.MissingDependencies)
                        {
                            Reason = $"Missing {metadata.Id} {metadata.Version}",
                            SourceVersion = new(metadata.Version, metadata.Version)
                        };
                    }
                    if (metadata.VersionRange != ApplicationVersionRange.Empty)
                    {
                        yield return new ModuleIssue(targetModule, metadata.Id, ModuleIssueType.MissingDependencies)
                        {
                            Reason = $"Missing {metadata.Id} {metadata.VersionRange}",
                            SourceVersion = metadata.VersionRange
                        };
                    }
                    yield break;
                }
            }

            // Check that the dependencies themselves have all dependencies present
            var opts = new ModuleSorterOptions { SkipOptionals = true, SkipExternalDependencies = true };
            foreach (var dependency in GetDependencies(modules, targetModule, visitedModules, opts).ToArray())
            {
                if (targetModule.DependentModules.FirstOrDefault(dmm => dmm.Id == dependency.Id) is { } dependencyData)
                {
                    // Not found, might be from DependentModuleMetadatas
                    if (dependencyData is null) continue;

                    // Ignore the check for Optional
                    if (dependencyData.IsOptional) continue;

                    // Check missing dependency dependencies
                    if (modules.FirstOrDefault(x => string.Equals(x.Id, dependency.Id, StringComparison.Ordinal)) is not { } depencencyModuleInfo)
                    {
                        yield return new ModuleIssue(targetModule, dependency.Id, ModuleIssueType.DependencyMissingDependencies)
                        {
                            Reason = $"'{dependency.Id}' is missing it's dependencies!"
                        };
                        yield break;
                    }
                
                    // Check depencency correctness
                    if (ValidateModule(modules, depencencyModuleInfo, visitedModules, isSelected).Any())
                    {
                        yield return new ModuleIssue(targetModule, dependency.Id, ModuleIssueType.DependencyValidationError)
                        {
                            Reason = $"'{dependency.Id}' has unresolved issues!"
                        };
                        yield break;
                    }
                }
                if (targetModule.DependentModuleMetadatas.FirstOrDefault(dmm => dmm.Id == dependency.Id) is { } dependencyMetadata)
                {
                    // Not found, might be from DependentModules
                    if (dependencyMetadata is null) continue;

                    // Handle onlyirect dependencies
                    if (dependencyMetadata.LoadType != LoadType.LoadBeforeThis) continue;
                    
                    // Ignore the check for Optional
                    if (dependencyMetadata.IsOptional) continue;

                    // Ignore the check for Incompatible
                    if (dependencyMetadata.IsIncompatible) continue;

                    // Check missing dependency dependencies
                    if (modules.FirstOrDefault(x => string.Equals(x.Id, dependency.Id, StringComparison.Ordinal)) is not { } depencencyModuleInfo)
                    {
                        yield return new ModuleIssue(targetModule, dependency.Id, ModuleIssueType.DependencyMissingDependencies)
                        {
                            Reason = $"'{dependency.Id}' is missing it's dependencies!"
                        };
                        yield break;
                    }

                    // Check depencency correctness
                    if (ValidateModule(modules, depencencyModuleInfo, visitedModules, isSelected).Any())
                    {
                        yield return new ModuleIssue(targetModule, dependency.Id, ModuleIssueType.DependencyValidationError)
                        {
                            Reason = $"'{dependency.Id}' has unresolved issues!"
                        };
                        yield break;
                    }
                }
            }

            // Check that the dependencies have the minimum required version set by DependedModuleMetadatas
            var comparer = new ApplicationVersionComparer();
            foreach (var metadata in targetModule.DependentModuleMetadatas.Where(m => /*!m.IsOptional &&*/ !m.IsIncompatible))
            {
                // Handle only direct dependencies
                if (metadata.LoadType != LoadType.LoadBeforeThis) continue;

                // Ignore the check for empty versions
                if (metadata.Version == ApplicationVersion.Empty && metadata.VersionRange == ApplicationVersionRange.Empty) continue;

                // Dependency is loaded
                if (modules.FirstOrDefault(x => string.Equals(x.Id, metadata.Id, StringComparison.Ordinal)) is not { } metadataModule) continue;

                if (metadata.Version != ApplicationVersion.Empty)
                {
                    // dependedModuleMetadata.Version > dependedModule.Version
                    if (!metadata.IsOptional && (comparer.Compare(metadata.Version, metadataModule?.Version) > 0))
                    {
                        yield return new ModuleIssue(targetModule, metadataModule?.Id, ModuleIssueType.VersionMismatch)
                        {
                            Reason = $"'{metadataModule?.Id}' wrong version <= {metadata.Version}",
                            SourceVersion = new(metadata.Version, metadata.Version)
                        };
                        yield break;
                    }
                }

                if (metadata.VersionRange != ApplicationVersionRange.Empty)
                {
                    // dependedModuleMetadata.Version > dependedModule.VersionRange.Min
                    // dependedModuleMetadata.Version < dependedModule.VersionRange.Max
                    if (!metadata.IsOptional)
                    {
                        if (comparer.Compare(metadata.VersionRange.Min, metadataModule?.Version) > 0)
                        {
                            yield return new ModuleIssue(targetModule, metadataModule?.Id, ModuleIssueType.VersionMismatch)
                            {
                                Reason = $"'{metadataModule?.Id}' wrong version < [{metadata.VersionRange}]",
                                SourceVersion = metadata.VersionRange
                            };
                            yield break;
                        }
                        if (comparer.Compare(metadata.VersionRange.Max, metadataModule?.Version) < 0)
                        {
                            yield return new ModuleIssue(targetModule, metadataModule?.Id, ModuleIssueType.VersionMismatch)
                            {
                                Reason = $"'{metadataModule?.Id}' wrong version > [{metadata.VersionRange}]",
                                SourceVersion = metadata.VersionRange
                            };
                            yield break;
                        }
                    }
                }
            }

            // Do not load this mod if an incompatible mod is selected
            foreach (var dependency in targetModule.IncompatibleModules)
            {
                // Dependency is loaded
                if (modules.FirstOrDefault(x => string.Equals(x.Id, dependency.Id, StringComparison.Ordinal)) is not { } dependencyModule || !isSelected(dependencyModule)) continue;

                // If the incompatible mod is selected, this mod should be disabled
                if (isSelected(dependencyModule))
                {
                    yield return new ModuleIssue(targetModule, dependencyModule.Id, ModuleIssueType.Incompatible)
                    {
                        Reason = $"'{dependencyModule.Id}' is incompatible with this module"
                    };
                    yield break;
                }
            }
            foreach (var metadata in targetModule.DependentModuleMetadatas.Where(m => m.IsIncompatible))
            {
                // Dependency is loaded
                if (modules.FirstOrDefault(x => string.Equals(x.Id, metadata.Id, StringComparison.Ordinal)) is not { } metadataModule || !isSelected(metadataModule)) continue;

                // If the incompatible mod is selected, this mod should be disabled
                if (isSelected(metadataModule))
                {
                    yield return new ModuleIssue(targetModule, metadataModule.Id, ModuleIssueType.Incompatible)
                    {
                        Reason = $"'{metadataModule.Id}' is incompatible with this module"
                    };
                    yield break;
                }
            }

            // If another mod declared incompatibility and is selected, disable this
            foreach (var module in modules)
            {
                // Ignore self
                if (module.Id == targetModule.Id) continue;

                if (!isSelected(module)) continue;
                
                foreach (var metadata in module.DependentModuleMetadatas.Where(m => m.IsIncompatible && m.Id == targetModule.Id))
                {
                    // If the incompatible mod is selected, this mod is disabled
                    if (isSelected(module))
                    {
                        yield return new ModuleIssue(targetModule, module.Id, ModuleIssueType.Incompatible)
                        {
                            Reason = $"'{module.Id}' is incompatible with this module"
                        };
                        yield break;
                    }
                }
            }
        }

        public static IEnumerable<ModuleIssue> EnableModule(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, Func<ModuleInfoExtended, bool> getSelected, Action<ModuleInfoExtended, bool> setSelected, Func<ModuleInfoExtended, bool> getDisabled, Action<ModuleInfoExtended, bool> setDisabled)
        {
            var visited = new HashSet<ModuleInfoExtended>();
            foreach (var issue in EnableModuleInternal(modules, targetModule, visited, getSelected, setSelected, getDisabled, setDisabled))
            {
                yield return issue;
            }
        }
        private static IEnumerable<ModuleIssue> EnableModuleInternal(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, HashSet<ModuleInfoExtended> visitedModules, Func<ModuleInfoExtended, bool> getSelected, Action<ModuleInfoExtended, bool> setSelected, Func<ModuleInfoExtended, bool> getDisabled, Action<ModuleInfoExtended, bool> setDisabled)
        {
            if (visitedModules.Contains(targetModule))
                yield break;
            visitedModules.Add(targetModule);
            
            setSelected(targetModule, true);

            var opt = new ModuleSorterOptions { SkipOptionals = true, SkipExternalDependencies = true };
            var dependencies = GetDependencies(modules, targetModule, opt).ToArray();

            // Select all dependencies
            foreach (var module in modules)
            {
                if (!getSelected(module) && dependencies.Any(d => d.Id == module.Id))
                {
                    foreach (var issue in EnableModuleInternal(modules, module, visitedModules, getSelected, setSelected, getDisabled, setDisabled))
                        yield return issue;
                }
            }
            
            // Enable modules that are marked as LoadAfterThis
            foreach (var metadata in targetModule.DependentModuleMetadatas)
            {
                if (metadata.IsOptional) continue;
                
                if (metadata.IsIncompatible) continue;
                
                if (metadata.LoadType != LoadType.LoadAfterThis) continue;
                
                if (modules.FirstOrDefault(x => x.Id == metadata.Id) is not { } metadataModule) continue;

                if (!getSelected(metadataModule))
                {
                    foreach (var issue in EnableModuleInternal(modules, metadataModule, visitedModules, getSelected, setSelected, getDisabled, setDisabled))
                        yield return issue;
                }
            }

            // Deselect and disable any mod that is incompatible with this one
            foreach (var metadata in targetModule.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible))
            {
                if (modules.FirstOrDefault(x => x.Id == metadata.Id) is not { } metadataModule) continue;
                
                if (getSelected(metadataModule))
                {
                    foreach (var issue in DisableModuleInternal(modules, metadataModule, visitedModules, getSelected, setSelected, getDisabled, setDisabled))
                        yield return issue;
                }

                setDisabled(metadataModule, true);
                yield return new ModuleIssue(metadataModule, metadataModule.Id, ModuleIssueType.Incompatible)
                {
                    Reason = $"'{targetModule.Id}' is incompatible with this"
                };
            }

            // Disable any mod that declares this mod as incompatible
            foreach (var module in modules)
            {
                foreach (var dmm in module.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible && dmm.Id == targetModule.Id))
                {
                    if (getSelected(module))
                    {
                        foreach (var issue in DisableModuleInternal(modules, module, visitedModules, getSelected, setSelected, getDisabled, setDisabled))
                            yield return issue;
                    }

                    // We need to re-check that everything is alright with the external dependency
                    setDisabled(module, getDisabled(module) | !AreDependenciesPresent(modules, module));
                }
            }
        }
        
        public static IEnumerable<ModuleIssue> DisableModule(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, Func<ModuleInfoExtended, bool> getSelected, Action<ModuleInfoExtended, bool> setSelected, Func<ModuleInfoExtended, bool> getDisabled, Action<ModuleInfoExtended, bool> setDisabled)
        {
            var visited = new HashSet<ModuleInfoExtended>();
            foreach (var issue in DisableModuleInternal(modules, targetModule, visited, getSelected, setSelected, getDisabled, setDisabled))
            {
                yield return issue;
            }
        }
        private static IEnumerable<ModuleIssue> DisableModuleInternal(IReadOnlyCollection<ModuleInfoExtended> modules, ModuleInfoExtended targetModule, HashSet<ModuleInfoExtended> visitedModules, Func<ModuleInfoExtended, bool> getSelected, Action<ModuleInfoExtended, bool> setSelected, Func<ModuleInfoExtended, bool> getDisabled, Action<ModuleInfoExtended, bool> setDisabled)
        {
            if (visitedModules.Contains(targetModule))
                yield break;
            visitedModules.Add(targetModule);
            
            setSelected(targetModule, false);

            var opt = new ModuleSorterOptions { SkipOptionals = true, SkipExternalDependencies = true };

            // Vanilla check
            // Deselect all modules that depend on this module if they are selected
            foreach (var module in modules/*.Where(m => !m.IsOfficial)*/)
            {
                var dependencies = GetDependencies(modules, module, opt);
                if (getSelected(module) && dependencies.Any(d => d.Id == targetModule.Id))
                {
                    foreach (var issue in DisableModuleInternal(modules, module, visitedModules, getSelected, setSelected, getDisabled, setDisabled))
                        yield return issue;
                }
            }

            // Enable for selection any mod that is incompatible with this one
            foreach (var metadata in targetModule.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible))
            {
                if (modules.FirstOrDefault(x => x.Id == metadata.Id) is not { } metadataModule) continue;
                setDisabled(metadataModule, false);
            }

            // Check if any mod that declares this mod as incompatible can be Enabled
            foreach (var module in modules)
            {
                foreach (var metadata in module.DependentModuleMetadatas.Where(dmm => dmm.IsIncompatible && dmm.Id == targetModule.Id))
                {
                    // We need to re-check that everything is alright with the external dependency
                    setDisabled(module, getDisabled(module) & !AreDependenciesPresent(modules, module));
                }
            }
        }
    }
#pragma warning restore
#nullable restore
}
