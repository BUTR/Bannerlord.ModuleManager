// <auto-generated>
//   This code file has automatically been added by the "Bannerlord.ModuleManager.Source" NuGet package (https://www.nuget.org/packages/Bannerlord.ModuleManager.Source).
//   Please see https://github.com/BUTR/Bannerlord.ModuleManager for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Bannerlord.ModuleManager.Source" folder and the "ModuleInfoExtendedExtensions.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

namespace Bannerlord.ModuleManager
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;

#nullable enable
#pragma warning disable
#if !BANNERLORDBUTRMODULEMANAGER_PUBLIC
    internal
#else
    public
# endif
        static class ModuleInfoExtendedExtensions
    {
        public static IEnumerable<DependentModuleMetadata> DependenciesAllDistinct(this ModuleInfoExtended module) => DependenciesAll(module).DistinctBy(x => x.Id);
        public static IEnumerable<DependentModuleMetadata> DependenciesAll(this ModuleInfoExtended module)
        {
            foreach (var metadata in module.DependentModuleMetadatas)
            {
                yield return metadata;
            }
            foreach (var metadata in module.DependentModules)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadBeforeThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
            foreach (var metadata in module.ModulesToLoadAfterThis)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadAfterThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
            foreach (var metadata in module.IncompatibleModules)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    IsIncompatible = true,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
        }
        
        public static IEnumerable<DependentModuleMetadata> DependenciesToLoadDistinct(this ModuleInfoExtended module) => DependenciesToLoad(module).DistinctBy(x => x.Id);
        public static IEnumerable<DependentModuleMetadata> DependenciesToLoad(this ModuleInfoExtended module)
        {
            foreach (var metadata in module.DependentModuleMetadatas.Where(x => !x.IsIncompatible))
            {
                yield return metadata;
            }
            foreach (var metadata in module.DependentModules)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadBeforeThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
            foreach (var metadata in module.ModulesToLoadAfterThis)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadAfterThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
        }
        
        public static IEnumerable<DependentModuleMetadata> DependenciesLoadBeforeThisDistinct(this ModuleInfoExtended module) => DependenciesLoadBeforeThis(module).DistinctBy(x => x.Id);
        public static IEnumerable<DependentModuleMetadata> DependenciesLoadBeforeThis(this ModuleInfoExtended module)
        {
            foreach (var metadata in module.DependentModuleMetadatas.Where(x => x.LoadType == LoadType.LoadBeforeThis))
            {
                yield return metadata;
            }
            foreach (var metadata in module.DependentModules)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadBeforeThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
        }
        
        public static IEnumerable<DependentModuleMetadata> DependenciesLoadAfterThisDistinct(this ModuleInfoExtended module) => DependenciesLoadAfterThis(module).DistinctBy(x => x.Id);
        public static IEnumerable<DependentModuleMetadata> DependenciesLoadAfterThis(this ModuleInfoExtended module)
        {
            foreach (var metadata in module.DependentModuleMetadatas.Where(x => x.LoadType == LoadType.LoadAfterThis))
            {
                yield return metadata;
            }
            foreach (var metadata in module.ModulesToLoadAfterThis)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    LoadType = LoadType.LoadAfterThis,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
        }
        
        public static IEnumerable<DependentModuleMetadata> DependenciesIncompatiblesDistinct(this ModuleInfoExtended module) => DependenciesIncompatibles(module).DistinctBy(x => x.Id);
        public static IEnumerable<DependentModuleMetadata> DependenciesIncompatibles(this ModuleInfoExtended module)
        {
            foreach (var metadata in module.DependentModuleMetadatas.Where(x => x.IsIncompatible))
            {
                yield return metadata;
            }
            foreach (var metadata in module.IncompatibleModules)
            {
                yield return new DependentModuleMetadata
                {
                    Id = metadata.Id,
                    IsIncompatible = true,
                    IsOptional = metadata.IsOptional,
                    Version = metadata.Version
                };
            }
        }
    }
#pragma warning restore
#nullable restore
}
